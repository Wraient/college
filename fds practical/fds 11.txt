#include <iostream>
using namespace std;

// Define the Job structure that will represent each job in the queue
struct Job {
    int jobID;       // Job identifier
    string jobName;  // Name or description of the job
    Job* next;       // Pointer to the next job in the queue
};

// JobQueue class that simulates the job queue
class JobQueue {
private:
    Job* front;  // Pointer to the front of the queue
    Job* rear;   // Pointer to the rear of the queue

public:
    // Constructor to initialize an empty queue
    JobQueue() {
        front = nullptr;
        rear = nullptr;
    }

    // Function to add a job to the queue (enqueue)
    void addJob(int id, string name) {
        Job* newJob = new Job();  // Create a new job
        newJob->jobID = id;
        newJob->jobName = name;
        newJob->next = nullptr;

        // If the queue is empty, set both front and rear to the new job
        if (rear == nullptr) {
            front = rear = newJob;
            return;
        }

        // Otherwise, add the new job at the rear of the queue
        rear->next = newJob;
        rear = newJob;
    }

    // Function to remove a job from the queue (dequeue)
    void deleteJob() {
        // If the queue is empty, there's nothing to delete
        if (front == nullptr) {
            cout << "No jobs in the queue to delete." << endl;
            return;
        }

        // Otherwise, remove the job from the front of the queue
        Job* temp = front;
        front = front->next;

        cout << "Job ID: " << temp->jobID << " (" << temp->jobName << ") has been processed and removed from the queue." << endl;

        // Delete the memory allocated for the removed job
        delete temp;

        // If the queue becomes empty, set rear to nullptr
        if (front == nullptr) {
            rear = nullptr;
        }
    }

    // Function to display the jobs in the queue
    void displayJobs() {
        if (front == nullptr) {
            cout << "The job queue is empty." << endl;
            return;
        }

        Job* temp = front;
        cout << "Current Job Queue: " << endl;
        while (temp != nullptr) {
            cout << "Job ID: " << temp->jobID << ", Job Name: " << temp->jobName << endl;
            temp = temp->next;
        }
    }

    // Destructor to clean up the memory
    ~JobQueue() {
        while (front != nullptr) {
            deleteJob();  // Delete all jobs in the queue
        }
    }
};

// Main function to simulate the job queue
int main() {
    JobQueue jobQueue;  // Create an instance of the JobQueue class
    int choice;
    int jobID;
    string jobName;

    do {
        cout << "\nJob Queue Simulation Menu:" << endl;
        cout << "1. Add Job to Queue" << endl;
        cout << "2. Delete Job from Queue" << endl;
        cout << "3. Display Jobs in Queue" << endl;
        cout << "4. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1:
                // Add a job to the queue
                cout << "Enter Job ID: ";
                cin >> jobID;
                cout << "Enter Job Name: ";
                cin.ignore();  // To clear the newline character left in the buffer
                getline(cin, jobName);
                jobQueue.addJob(jobID, jobName);
                cout << "Job added to the queue." << endl;
                break;

            case 2:
                // Delete a job from the queue
                jobQueue.deleteJob();
                break;

            case 3:
                // Display jobs in the queue
                jobQueue.displayJobs();
                break;

            case 4:
                cout << "Exiting the program." << endl;
                break;

            default:
                cout << "Invalid choice! Please try again." << endl;
        }
    } while (choice != 4);

    return 0;
}
