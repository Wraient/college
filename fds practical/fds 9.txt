#include <iostream>
#include <stack>
#include <unordered_map>

using namespace std;

// Function to check if the given expression is well-parenthesized
bool isBalanced(const string& expression) {
    // Stack to store opening parentheses
    stack<char> s;

    // Map to match the closing parentheses with their corresponding opening parentheses
    unordered_map<char, char> matchingParentheses = {
        {')', '('}, 
        {'}', '{'}, 
        {']', '['}
    };

    // Traverse each character in the expression
    for (char ch : expression) {
        // If the character is an opening parenthesis, push it onto the stack
        if (ch == '(' || ch == '{' || ch == '[') {
            s.push(ch);
        }
        // If the character is a closing parenthesis
        else if (ch == ')' || ch == '}' || ch == ']') {
            // Check if the stack is empty (no matching opening parenthesis)
            if (s.empty()) {
                return false;
            }

            // Pop the top element from the stack and check if it matches the corresponding opening parenthesis
            char top = s.top();
            s.pop();
            
            // If the popped character doesn't match the corresponding opening parenthesis, return false
            if (top != matchingParentheses[ch]) {
                return false;
            }
        }
    }

    // If the stack is empty, the expression is balanced
    return s.empty();
}

// Main function to test the program
int main() {
    string expression;

    // Input the expression
    cout << "Enter the expression: ";
    cin >> expression;

    // Check if the expression is well-parenthesized
    if (isBalanced(expression)) {
        cout << "The expression is well-parenthesized." << endl;
    } else {
        cout << "The expression is not well-parenthesized." << endl;
    }

    return 0;
}
