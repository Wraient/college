#include <iostream>
#include <stack>
#include <cctype>
#include <cmath>
#include <unordered_map>

using namespace std;

// Function to check precedence of operators
int precedence(char op) {
    if (op == '+' || op == '-') return 1;
    if (op == '*' || op == '/') return 2;
    return 0;  // For parentheses
}

// Function to apply the operator on two operands
int applyOperator(int a, int b, char op) {
    switch (op) {
        case '+': return a + b;
        case '-': return a - b;
        case '*': return a * b;
        case '/': return a / b;
        default: return 0;
    }
}

// Function to convert infix expression to postfix
string infixToPostfix(const string& infix) {
    stack<char> operators;
    string postfix = "";

    for (char ch : infix) {
        if (isalnum(ch)) {
            // If it's an operand (single character), add it to the postfix expression
            postfix += ch;
        }
        else if (ch == '(') {
            // If it's an opening parenthesis, push it to the stack
            operators.push(ch);
        }
        else if (ch == ')') {
            // If it's a closing parenthesis, pop and append all operators from the stack
            // until an opening parenthesis is found
            while (!operators.empty() && operators.top() != '(') {
                postfix += operators.top();
                operators.pop();
            }
            operators.pop();  // Pop the '('
        }
        else {
            // If it's an operator, pop operators from the stack with higher or equal precedence
            while (!operators.empty() && precedence(operators.top()) >= precedence(ch)) {
                postfix += operators.top();
                operators.pop();
            }
            operators.push(ch);  // Push the current operator to the stack
        }
    }

    // Pop all remaining operators from the stack
    while (!operators.empty()) {
        postfix += operators.top();
        operators.pop();
    }

    return postfix;
}

// Function to evaluate a postfix expression
int evaluatePostfix(const string& postfix) {
    stack<int> operandStack;

    for (char ch : postfix) {
        if (isdigit(ch)) {
            // If it's a digit, push it to the stack
            operandStack.push(ch - '0');
        }
        else {
            // If it's an operator, pop two operands, apply the operator, and push the result back
            int b = operandStack.top();
            operandStack.pop();
            int a = operandStack.top();
            operandStack.pop();

            int result = applyOperator(a, b, ch);
            operandStack.push(result);
        }
    }

    return operandStack.top();  // The final result
}

int main() {
    string infixExpression;

    // Input infix expression
    cout << "Enter the infix expression: ";
    cin >> infixExpression;

    // Convert the infix expression to postfix
    string postfixExpression = infixToPostfix(infixExpression);
    cout << "Postfix expression: " << postfixExpression << endl;

    // Evaluate the postfix expression
    int result = evaluatePostfix(postfixExpression);
    cout << "Result of postfix evaluation: " << result << endl;

    return 0;
}
